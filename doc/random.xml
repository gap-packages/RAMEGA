<!--

  random.xml            ramega package documentation          Zsolt Adam Balogh
																	Vasyl Laver

  Copyright (C) 2020  Zsolt Adam Balogh, Vasyl Laver, Department of Mathematical Sciences,
  UAEU, Al Ain, United Arab Emirates
  This file is free software, see license information at the end.

  This chapter contains the operations with logic functions
-->

<Chapter Label="random">
<Heading>Random Methods</Heading>

<Section Label="random_basic">
<Heading>Basic Operations</Heading>

Please note, that throughout this package it is assumed that the group <C>G</C> is finite.

<ManSection>
<Func Name="BasicGroup" Arg="KG"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->

Let <M>G</M> be a group and <M>F</M> a field. Then the group algebra <M>FG</M> consists of the set of formal
linear combinations of the form
<Display>
\sum_{g \in G} \alpha_g g, \quad \alpha_g \in F
</Display>
where all but finitely many of the <M>\alpha_g</M> are zero  <Cite Key="Lbook"/><Cite Key="Bovdi_survey"/>. <P/>

For the group ring <C>KG</C> the function <C>BasicGroup</C> returns the basic group of <C>KG</C> as a subgroup of the group of units of <C>KG</C>.<P/>



<Example>
<![CDATA[
gap> G:=CyclicGroup(IsFpGroup,4);
<fp group of size 4 on the generators [ a ]>
gap> Elements(G);
[ <identity ...>, a, a^2, a^3 ]
gap> KG:=GroupRing(GF(2),G);
<algebra-with-one over GF(2), with 1 generators>
gap> BasicGroup(KG);
<group with 4 generators>
gap> Elements(last);
[ (Z(2)^0)*<identity ...>, (Z(2)^0)*a, (Z(2)^0)*a^2, (Z(2)^0)*a^3 ]
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="IsLienEngel" Arg="KG"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->

On any associative ring <M>R</M> the Lie bracket is defined as <M>[x,y] = xy-yx.</M>. For any positive integer <M>n</M>,
a subset <M>\Lambda</M> of <M>R</M> is said to be Lie <M>n</M>-Engel if for any <M>x,y \in \Lambda</M>,
<M>[x,y,\ldots,y]=0</M> (<M>y</M> is taken <M>n</M> times)  <Cite Key="Lee2000"/><Cite Key="Sehgal_book"/>  .<P/>

For the group ring <C>KG</C> the function <C>IsLienEngel</C> returns <C>true</C> if <C>KG</C> is Lie <M>n</M>-Engel and <C>false</C> otherwise.

<Example>
<![CDATA[
gap> G:=CyclicGroup(4);
<pc group of size 4 with 2 generators>
gap> KG:=GroupRing(GF(2),G);
<algebra-with-one over GF(2), with 2 generators>
gap> IsLienEngel(KG);
false
gap> G:=DihedralGroup(16);
<pc group of size 16 with 4 generators>
gap> KG:=GroupRing(GF(2),G);
<algebra-with-one over GF(2), with 4 generators>
gap> IsLienEngel(KG);
true
]]>
</Example>
</Description> </ManSection>
</Section>

<Section Label="random_methods_elements">
<Heading>Random Methods for Obtaining Elements With Desired Properties</Heading>

<ManSection>
<Func Name="GetRandomUnit" Arg="KG"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->
For the group ring <C>KG</C> the function <C>GetRandomUnit</C> returns an unit
(i.e. an invertible element) by a random way.

<Example>
<![CDATA[
gap> G:=CyclicGroup(4);
<pc group of size 4 with 2 generators>
gap> KG:=GroupRing(GF(7),G);
<algebra-with-one over GF(7), with 2 generators>
gap> u:=GetRandomUnit(KG);;
gap> Augmentation(u);
Z(7)^4
gap> u*u^-1;
(Z(7)^0)*<identity> of ...
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="GetRandomNormalizedUnit" Arg="KG"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->
Let <M>U(KG)</M> be the multiplicative group of the group algebra <M>KG</M> of the <M>p</M>-group <M>G</M>
over a field <M>K</M> of characteristic <M>p</M>. The subgroup
<Display>
V(KG)=\{ \sum_{g \in G} \alpha_g g \in U(KG) \mid \sum_{g \in G} \alpha_g = 1 \}
</Display>
is called the group of normalized units of the group algebra <M>KG</M> <Cite Key="Bovdi_Szakacs_I"/>. <P/>

For the group ring <C>KG</C> the function <C>GetRandomNormalizedUnit</C> returns a normalized unit
(i.e. an invertible element with augmentation 1, <M>u \in V(KG)</M>) by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(IsFpGroup,16);;
gap> KG:=GroupRing(GF(2),G);;
gap> u:=GetRandomNormalizedUnit(KG);;
gap> Augmentation(u);
Z(2)^0
gap> u*u^-1;
(Z(2)^0)*<identity ...>
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="GetRandomNormalizedUnitaryUnit" Arg="KG [,eta]"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->
Let <M>p</M> be a prime, <M>K</M> the field of characteristic <M>p</M>, <M>G</M> a finite abelian <M>p</M>-group
with an arbitrary antiautomorphism <M>\eta</M> of order 2 and <M>G_{\eta}=\{g \in G \mid \eta(g)=g\}</M>. Extending
the antiautomorphism <M>\eta</M> to the group algebra <M>KG</M> we obtain the involution
<Display>
  x = \sum_{g \in G} \alpha_g g \mapsto x^{*}= \sum_{g \in G} \alpha_g \eta(g)
</Display>
of KG which is called as <M>\eta</M>-involution. If <M>\eta(g)=g^{-1}</M> for all <M>g \in G</M> then this
involution is called canonical. Then, if <M>V(KG)</M> is the group of normalized units of <M>KG</M>, the subgroup
of unitary units is defined as <Cite Key="BovdiSzakacs2006"/>
<Display>
V_*(KG)=\{x \in V(FG) \mid x^* = x^{-1} \}.
</Display>

<P/> For the group algebra <C>KG</C> the function <C>GetRandomNormalizedUnitaryUnit</C> returns a normalized unitary unit
(i.e. such an invertible element with augmentation 1, that <M>u\cdot u^{*}=1</M>) by a random way. Also, there
exists a two-parametrical version of this method, where the second parameter <M>\eta</M> is an arbitrary antiautomorphism of <M>G</M>.
In this case, the function <C>GetRandomNormalizedUnitaryUnit</C> returns a normalized unitary unit
(i.e. such an invertible element with augmentation 1, that <M>u\cdot u^{*}=1</M>) by a random way
for the group algebra <C>KG</C> and an arbitrary antiautomorphism <C>eta</C>.


<Example>
<![CDATA[
gap> G:=CyclicGroup(4);;
gap> KG:=GroupRing(GF(2),G);;
gap> u:=GetRandomNormalizedUnitaryUnit(KG);;
gap> u*Involution(u);
(Z(2)^0)*<identity> of ...
gap> Augmentation(u);
Z(2)^0
gap> Aut:=AutomorphismGroup(G);;
gap> KG:=GroupRing(GF(2),G);;
gap> Aut2:=Filtered(Aut,i->Order(i)=2);;
gap> Aut2;
[ [ f1*f3 ] -> [ f1*f2*f4 ], [ f1*f3 ] -> [ f1*f3*f4 ],
  [ f1*f3 ] -> [ f1*f2 ] ]
gap> eta:=Aut2[2];
[ f1*f3 ] -> [ f1*f3*f4 ]
gap> u:=GetRandomNormalizedUnitaryUnit(KG,eta);;
gap> u*RAMEGA_InvolutionKG(u, eta, KG);
(Z(2)^0)*<identity> of ...
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="GetRandomCentralNormalizedUnit" Arg="KG"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->
For the group ring <C>KG</C> the function <C>GetRandomCentralNormalizedUnit</C> returns a central normalized unit
(i.e. such an invertible element with augmentation 1, that <M>u\cdot x=x \cdot u</M>, <M>\forall x \in KG</M>) by a random way.

<Example>
<![CDATA[
gap> G:=CyclicGroup(IsFpGroup,4);;
gap> KG:=GroupRing(GF(2),G);;
gap> u:=GetRandomCentralNormalizedUnit(KG);;
gap> Augmentation(u);
Z(2)^0
gap> bool:=true;
true
gap> for x in Elements(KG) do
> if x*u<>u*x then bool:=false; break; fi;
> od;
gap> bool;
true
]]>
</Example>
</Description> </ManSection>


<ManSection>
<Func Name="GetRandomElementFromAugmentationIdeal" Arg="KG"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->
If <M>KG</M> is a modular group ring then its augmentation ideal <M>A</M> is generated by all elements of the form
<M>g-1</M> where <M>g \in G \setminus \{1 \}</M>. The augmentation ideal consists of all elements with augmentation 0,
i.e.
<Display>
A(KG)=\{ \sum_{g \in G} \alpha_g g \in KG \mid \sum_{g \in G} \alpha_g = 0 \}.
</Display>
<P/>
For the modular group ring <C>KG</C> the function <C>GetRandomElementFromAugmentationIdeal</C> returns an element
from the augmentation ideal of <M>KG</M> by a random way.

<Example>
<![CDATA[
gap> G:=QuaternionGroup(16);
<pc group of size 16 with 4 generators>
gap> KG:=GroupRing(GF(2),G);
<algebra-with-one over GF(2), with 4 generators>
gap> u:=GetRandomElementFromAugmentationIdeal(KG);;
gap> Augmentation(u);
0*Z(2)
]]>
</Example>
</Description> </ManSection>
</Section>
<Section Label="random_methods_general">
<Heading>Random Methods for Group Rings</Heading>

<ManSection>
<Func Name="RandomLienEngelLength" Arg="KG, num"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->
Let <C>KG</C> be a Lie n-Engel group ring and let <M>[x,y,y,\ldots,y]=0</M> for all <M>x, y \in KG </M>. Then the number of <M>y</M>'s in the last equation is called
 the Lie <M>n</M>-Engel length <Cite Key="shalev"/><Cite Key="kurdics_1"/><Cite Key="kurdics_2"/>. <P/>
For the Lie n-Engel group ring <C>KG</C> and the maximal number of iterations <C>num</C> the function <C>RandomLienEngelLength</C> returns the Lie <M>n</M>-Engel length of <M>KG</M> by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(16);;
gap> KG:=GroupRing(GF(2),G);;
gap> RandomLienEngelLength(KG,100);
4
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomExponent" Arg="KG, num"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->
For the group ring <C>KG</C> (where <M>G</M> is a finite <M>p</M>-group and the characteristic of <M>K</M> is <M>p</M>) and the maximal number of
iterations <C>num</C> the function <C>RandomExponent</C> returns the
exponent of <C>V(KG)</C> <Cite Key="bovdi_exponent"/> <Cite Key="bovdi_salim_exponent"/> <Cite Key="shalev_2"/> by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(16);;
gap> KG:=GroupRing(GF(2),G);;
gap> RandomExponent(KG,100);
8
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomExponentOfNormalizedUnitsCenter" Arg="KG, num"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->
For the group ring <C>KG</C> (where <M>G</M> is a finite <M>p</M>-group and the characteristic of <M>K</M> is <M>p</M>) and the maximal number of iterations <C>num</C> the function <C>RandomExponentOfNormalizedUnitsCenter</C> returns the
exponent of the center of the group of normalized units of <C>KG</C> by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(16);;
gap> KG:=GroupRing(GF(2),G);;
gap> RandomExponentOfNormalizedUnitsCenter(KG,100);
4
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomNilpotencyClass" Arg="KG, num"/>
<Description>
<!-- The names chosen for the arguments describe their meaning.-->
Let <M>G</M> be a group and let <M>g_1,\ldots,g_n \in G </M>. By the symbol <M>(g_1,\ldots,g_n)</M> we denote the
commutator of the elements <M>g_1,\ldots,g_n</M> which is defined inductively as
<Display>
(g_1,\ldots,g_n)=((g_1,\ldots,g_{n-1}),g_n), \quad (g_1,g_2)=g_1^{-1}g_2^{-1}g_1 g_2.
</Display>
As usual, for the subsets <M>X, Y</M> of G we will denote by <M>(X,Y)</M> the subgroup generated by all
commutators <M>(x,y)</M> with <M>x \in X</M>, <M>y \in Y</M>. <P/>
This allows us to define the lower central series of a nonempty subset <M>H</M> of <M>G</M>: let
<M>\gamma_{n+1}(H)=(\gamma_{n}(H),H)</M> with <M>\gamma_1(H)=H</M>. We say that <M>H</M> is nilpotent if
<M>\gamma_{n}(H)=1</M> for some <M>n</M>. For a nilpotent subset <M>H \subseteq G</M> the number
<Display>
  cl(H) = \min\{n \in \mathbb{N}_0: \gamma_{n+1}(H)=1\}
</Display>
is called the nilpotency class of <M>H</M> <Cite Key="BaloghJuhasz2011"/><Cite Key="shalev_1"/><Cite Key="shalev_2"/><Cite Key="shalev_3"/>
<Cite Key="shalev_4"/><Cite Key="shalev_5"/>.
<P/>
  For the Lie nilpotent group ring <C>KG</C> and the maximal number of iterations <C>num</C> the function
  <C>RandomNilpotencyClass</C> returns the nilpotency class of the group of normalized units of <C>KG</C> by a
  random way.


<Example>
<![CDATA[
gap> G:=DihedralGroup(16);;
gap> KG:=GroupRing(GF(2),G);;
gap> RandomNilpotencyClass(KG,100);
4
]]>
</Example>
</Description> </ManSection>



<ManSection>
<Func Name="RandomDerivedLength" Arg="KG, n"/>
<Description>
<M>KG</M> is called <A>Lie solvable</A>, if some of the terms of the Lie derived series <M>\delta^{[n]}(KG)=[\delta^{[n-1]}(KG),\delta^{[n-1]}(KG)]</M>
with <M>\delta^{[0]}(KG)=KG</M> are equal to zero. <P/>
Denote by <M>dl_L(KG)</M> the minimal element of the set <M>\{m\in\mathbb N\;\vert\;
\delta^{[m]}(KG)=0\}</M>, which is said to be the <A>Lie derived length</A> of <M>KG</M> <Cite Key="balogh_1"/>
<Cite Key="balogh_2"/><Cite Key="spinelli_1"/><Cite Key="sahai_1"/>. <P/>


For the modular group ring <C>KG</C> and a positive integer  <C>n</C> the function <C>RandomDerivedLength</C>
returns the Lie derived length by a random way.

<Example>
<![CDATA[
gap> D:=DihedralGroup(IsFpGroup,8);;
gap> KG:=GroupRing(GF(2),D);;
gap> RandomDerivedLength(KG,100);
2
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomCommutatorSubgroup" Arg="KG, n"/>
<Description>
For the group ring <C>KG</C> and a positive integer  <C>n</C> the function <C>RandomCommutatorSubgroup</C> returns the commutator subgroup of the unit group of
<M>KG</M> using <M>n</M> iterations by a random way. There is also an overloaded version of this method
for finding the commutator subgroup of an arbitrary group <M>G</M> using <M>n</M> iterations by a random way.



<Example>
<![CDATA[
gap> G:=DihedralGroup(IsFpGroup,8);;
gap> KG:=GroupRing(GF(2),G);;
gap> SG:=RandomCommutatorSubgroup(KG,100);
gap> StructureDescription(SG);
"C2 x C2 x C2"
]]>
</Example>
</Description> </ManSection>


<ManSection>
<Func Name="RandomCommutatorSubgroupOfNormalizedUnits" Arg="KG, n"/>
<Description>
For the modular group ring <C>KG</C> and a positive integer  <C>n</C> the function <C>RandomCommutatorSubgroupOfNormalizedUnits</C>
returns the commutator subgroup of normalized units by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(8);;
gap> KG:=GroupRing(GF(2),G);;
gap> SG:=RandomCommutatorSubgroupOfNormalizedUnits(KG,100);;
gap> u:=Random(Elements(SG));;
gap> Augmentation(u);
Z(2)^0
]]>
</Example>
</Description> </ManSection>


<ManSection>
<Func Name="RandomNormalizedUnitGroup" Arg="KG, n"/>
<Description>
For a group ring <C>KG</C>, where <C>G</C> is a finite <C>p</C>-group and <C>K</C> has
characteristic <C>p</C> and a positive integer <C>n</C>, where <C>n</C> is the number of iterations, the
function <C>RandomNormalizedUnitGroup</C> returns the normalized unit group of <C>KG</C> by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(8);;
gap> KG:=GroupRing(GF(2),G);;
gap> SG:=RandomNormalizedUnitGroup(KG);
<group with 4 generators>
gap> Size(SG);
128
gap> u:=Random(Elements(SG));;
gap> Augmentation(u);
Z(2)^0
]]>
</Example>
</Description> </ManSection>


<ManSection>
<Func Name="RandomUnitarySubgroup" Arg="KG, n"/>
<Description>
For a modular group ring <C>KG</C> and a positive integer  <C>n</C>, where <C>n</C> is the number of iterations, the function <C>RandomUnitarySubgroup</C>
returns the subgroup generated by the normalized unitary units (see  <Ref Func="GetRandomNormalizedUnitaryUnit" />) by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(8);;
gap> KG:=GroupRing(GF(2),G);;
gap> SG:=RandomUnitarySubgroup(KG,100);;
gap> u:=Random(Elements(SG));;
gap> Augmentation(u);
Z(2)^0
gap> u*u^-1;
(Z(2)^0)*<identity> of ...
]]>
</Example>
</Description> </ManSection>


<ManSection>
<Func Name="RandomCommutatorSeries" Arg="KG, n"/>
<Description>
For a modular group ring <C>KG</C>, where <C>G</C> is a <C>p</C>-group, and a positive integer  <C>n</C>, where <C>n</C> is the number of iterations, the function
<C>RandomCommutatorSeries</C>
returns the commutator series of the group of normalized units in <M>KG</M> by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(8);;
gap> KG:=GroupRing(GF(2),G);;
gap> CS:=RandomCommutatorSeries(KG,100);
[ <group of size 128 with 4 generators>, <group of size 8 with 8 generators>,
  <group of size 1 with 1 generators> ]
]]>
</Example>
</Description>
</ManSection>

<ManSection>
<Func Name="RandomLowerCentralSeries" Arg="KG, n"/>
<Description>
The lower central series of a group <M>G</M> is the descending series of groups
<Display>
G=G_1 \trianglerighteq G_2 \trianglerighteq \ldots \trianglerighteq G_n \trianglerighteq \ldots,
</Display>
where each <M>G_{n+1}=[G_n,G]</M>, the subgroup generated by all commutators <M>[x,y]</M> with <M>x</M> in <M>G_n</M>
and <M>y</M> in <M>G</M>. Thus, <M>G_2=[G,G]=G^{(1)}</M>, the derived subgroup of <M>G</M>; <M>G_3=[[G,G],G]</M>, etc.
The lower central series is often denoted <M>y_n(G)</M>.
<P/>For a group ring <C>KG</C>, for which <M>V(KG)</M> is nilpotent,
 and a positive integer  <C>n</C>, where <C>n</C> is the number of iterations, the function <C>RandomLowerCentralSeries</C>
returns the lower central series of the group of normalized units of <M>KG</M> by a random way.

<Example>
<![CDATA[
gap> G:=DihedralGroup(8);;
gap> KG:=GroupRing(GF(2),G);;
gap> CS:=RandomLowerCentralSeries(KG,100);
[ <group of size 128 with 4 generators>, <group of size 8 with 8 generators>,
  <group of size 1 with 1 generators> ]
]]>
</Example>
</Description> </ManSection>


<ManSection>
<Func Name="RandomUnitaryOrder" Arg="KG, n [,sigma]"/>
<Description>
For the group ring <C>KG</C>, where <C>G</C> is a finite <C>p</C>-group and <C>K</C> has characteristic <C>p</C>,
and a positive integer  <C>n</C>, where <C>n</C> is the number of iterations, the function <C>RandomUnitaryOrder</C>
returns the order of the unitary subgroup of <M>KG</M> <Cite Key="Creedon_Gildea_I"/> by a random way. Also, there exists a three-parametrical version of this method,
where the third parameter <C>sigma</C> is an arbitrary anti-automorphism of <M>G</M>.

<Example>
<![CDATA[
gap> G:=DihedralGroup(8);;
gap> KG:=GroupRing(GF(2),G);;
gap> ord:=RandomUnitaryOrder(KG,100);
64
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomOmega" Arg="G, m, n"/>
<Description>

For the <C>p</C> group <C>G</C> and a positive integers <C>m</C> and <C>n</C> (number of iterations) the function <C>RandomOmega</C>
returns the subgroup of <M>G</M>, that is generated by the elements <M>g</M> for which <M>g^{p^m}=1</M>, by random search.

<Example>
<![CDATA[
gap> G:=CyclicGroup(8);;
gap> KG:=GroupRing(GF(2),G);;
gap> RO:=RandomOmega(KG,2,50);;
gap> u:=Random(Elements(RO));;
gap> (u^2)^2;
(Z(2)^0)*<identity> of ...
gap> ## Let h be a group.
gap> h:=SmallGroup(16,10);;
gap> RO:=RandomOmega(h,2,50);;
gap> u:=Random(Elements(RO));;
gap> (u^2)^2;
<identity> of ...
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomAgemo" Arg="G, m, n"/>
<Description>

For the <C>p</C>-group <C>G</C> and a positive integers <C>m</C> and <C>n</C> (number of iterations) the function <C>RandomOmega</C>
returns the subgroup of <M>G</M>, that is generated by the elements <M>g^{p^m}</M> by random search.

<Example>
<![CDATA[
gap> G:=CyclicGroup(8);;
gap> KG:=GroupRing(GF(2),G);;
gap> RA:=RandomAgemo(KG,2,50);;
gap> Elements(RA);
[ (Z(2)^0)*<identity> of ..., (Z(2)^0)*f3 ]
gap> u:=Random(Elements(RA));;
gap> (u^2)^2;
(Z(2)^0)*<identity> of ...
gap> ## Let h be a group.
gap> h:=SmallGroup(16,10);;
gap> RA:=RandomAgemo(h,2,50);;
gap> Elements(RA);
[ <identity> of ... ]
]]>
</Example>
</Description> </ManSection>


<ManSection>
<Func Name="RandomDihedralDepth" Arg="G,n"/>
<Description>
  For a non abelian finite 2-group <C>G</C> and a positive integer <C>n</C>, where <C>n</C>
  is the number of iterations, the function <C>RandomDihedralDepth</C>
   returns the dihedral depth of <C>G</C>, which is defined to be the maximal
  number <C>d</C> such that <C>G</C> contains a subgroup isomorphic to the dihedral group of order <M>2^{(d+1)}</M>.

<Example>
<![CDATA[
gap> G:=SmallGroup([64,6]);
<pc group of size 64 with 6 generators>
gap> StructureDescription(G);
"(C8 x C4) : C2"
gap> RandomDihedralDepth(G,1000);
2
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomQuaternionDepth" Arg="G,n"/>
<Description>
  For a non abelian finite 2-group <C>G</C> and a positive integer <C>n</C>, where <C>n</C>
  is the number of iterations, the function <C>RandomQuaternionDepth</C>
   returns the quaternion depth of <C>G</C>, which is defined to be the maximal
  number <C>d</C> such that <C>G</C> contains a subgroup isomorphic to the
  generalized quaternion group of order <M>2^{(d+1)}</M>.

<Example>
<![CDATA[
gap> G:=SmallGroup([64,10]);
<pc group of size 64 with 6 generators>
gap> StructureDescription(G);
"(C8 : C4) : C2"
gap> RandomQuaternionDepth(G,1000);
2
]]>
</Example>
</Description> </ManSection>


<ManSection>
<Func Name="GetRandomSubgroupOfNormalizedUnitGroup" Arg="KG,n"/>
<Description>
  For a group ring <C>KG</C> and a positive integer <C>n</C>, the function
  <C>GetRandomSubgroupOfNormalizedUnitGroup</C>
  returns a subgroup of the normalized group of units generated by n
  random normalized units.
<Example>
<![CDATA[
gap> KG:=GroupRing(GF(2),DihedralGroup(8));;
gap> G:=GetRandomSubgroupOfNormalizedUnitGroup(KG,2);
<group with 2 generators>
gap> StructureDescription(G);
"(C4 x C2) : C2"
]]>
</Example>
</Description> </ManSection>


<ManSection>
<Func Name="RandomConjugacyClass" Arg="KG,n"/>
<Description>
  For a group ring <C>KG</C> and a positive integer <C>n</C> (number of iterations), the function
  <C>RandomConjugacyClass</C>
  returns the random conjugacy class of a random element of the group of
  normalized units.
<Example>
<![CDATA[
gap> KG:=GroupRing(GF(2),DihedralGroup(8));;
gap> cc:=RandomConjugacyClass(KG,4);;
gap> List(cc,i->Order(i));
[ 4, 4, 4 ]
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomConjugacyClasses" Arg="KG,n"/>
<Description>
  For a modular group algebra <C>KG</C> and a positive integer <C>n</C> (number of iterations), the function
  <C>RandomConjugacyClasses</C>
  returns the conjugacy classes of the group of
  normalized units.
<Example>
<![CDATA[
gap> KG:=GroupRing(GF(2),SmallGroup(8,3));;
gap> cc:=RandomConjugacyClasses(KG,100);;
gap> Size(Union(cc));
128
gap> Collected(List(cc,x->Number(x)));
[ [ 1, 16 ], [ 4, 28 ] ]
gap> vkg:=RandomNormalizedUnitGroup(KG);;
gap> Size(vkg);
128
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomIsCentralElement" Arg="KG,u,n"/>
<Description>
  For a group ring <C>KG</C>, element <M>u \in KG</M>,  and a positive integer <C>n</C> (number of iterations), the function
  <C>RandomIsCentralElement</C>
  returns true if u is a central element by random way.

<Example>
<![CDATA[
gap> KG:=GroupRing(GF(2),CyclicGroup(16));;
gap> u:=Random(Elements(KG));;
gap> RandomIsCentralElement(KG,u,100);
true
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomIsNormal" Arg="KG,N,n"/>
<Description>
  For a group ring <C>KG</C>, subgroup <C>N</C>, and a positive integer <C>n</C> (number of iterations), the function
  <C>RandomIsNormal</C>
  returns true if N is normal in the normalized group of units by random way.

<Example>
<![CDATA[
gap> KG:=GroupRing(GF(2),CyclicGroup(4));;
gap> u:=Elements(KG)[16];
(Z(2)^0)*f1*f2
gap> G:=Group(u);;
gap> StructureDescription(G);
"C4"
gap> RandomIsNormal(KG,G,100);
true
]]>
</Example>
</Description> </ManSection>


<ManSection>
<Func Name="RandomCenterOfCommutatorSubgroup" Arg="KG,n"/>
<Description>
  For a group ring <C>KG</C>, and a positive integer <C>n</C> (number of iterations), the function
  <C>RandomCenterOfCommutatorSubgroup</C> returns the center of the commutator subgroup of the normalized
   unit group using random method.
<Example>
<![CDATA[
gap> RANDOM_SEED(1);
gap> KG:=GroupRing(GF(2),DihedralGroup(8));;
gap> cc:=RandomCenterOfCommutatorSubgroup(KG,100);
<group with 8 generators>
gap> StructureDescription(cc);
"C2 x C2 x C2"
]]>
</Example>
</Description> </ManSection>

<ManSection>
<Func Name="RandomConjugacyClassByElement" Arg="KG,u,n"/>
<Description>
  For a group ring <C>KG</C>, normalized unit <M>u \in KG</M>, and a positive integer <C>n</C> (number of iterations), the function
  <C>RandomConjugacyClassByElement</C> returns the random conjugacy class of the normalized unit <C>u</C>.
<Example>
<![CDATA[
gap> KG:=GroupRing(GF(2),DihedralGroup(8));;
gap> u:=Random(Elements(KG));;
gap> rcc: = RandomConjugacyClassByElement(KG,u,100);
gap> rcc[1]*u*rcc[1]^-1;
true
]]>
</Example>
</Description> </ManSection>








</Section>


</Chapter>

<!--
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; version 2 of the License.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->
